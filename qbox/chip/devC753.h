/*
 * devC753.h
 *
 *  Created on: 2012-2-19
 *      Author: icecoffee76
 */

#ifndef _DEV_C753_H_
#define _DEV_C753_H_

#include <map>
#include <list>

#include "devBus.h"

using namespace std;

namespace chip
{




class DriverChip753
:public SPIBus
{

public:
	DriverChip753();
	virtual ~DriverChip753();

	/*Basic function*/
	void C753SetBasicAddress(DWORD dwAddr);
	DWORD C753GetBasicAddress(void);
	void C753SetMainControl(WORD wVal);
	void C753SetCh1MainControl(BYTE byVal);
	BYTE C753GetCh1MainControl(void);
	void C753SetCh2MainControl(BYTE byVal);
	BYTE C753GetCh2MainControl(void);
	void C753SetDDRControl(BYTE byVal);
	void C753SetRegisterValueTransferControl(WORD wVal);
	void C753SetMemoryControl(BYTE byVal);
	void C753Reset(BYTE byVal);
	/*Bank0 function*/
	void C753SetOutputPortSyncControl(WORD wVal);
	WORD C753GetOutputPortSyncControl(void);
	void C753SetForcedSyncResetDelay(BYTE byVal);
	void C753SetForcedSyncResetControl(WORD wVal);
	void C753SetFieldInterlockTransferControl(BYTE byVal);
	void C753SetFieldPropagationDelay1(BYTE byVal);
	void C753SetFieldPropagationDelay2(BYTE byVal);
	void C753SetOutputSignalSwap(BYTE byVal);
	void C753SetPOCLKControl(BYTE byVal);
	void C753SetScalingWidthControl(BYTE byVal);
	void C753SetInterlaceOutputControl(BYTE byVal);
	void C753SetOverlayControl(BYTE byVal);
	BYTE C753GetOverlayControl(void);
	void C753Set2ScreenBlendingAlphaCoefficient(BYTE byVal);
	void C753Set2ScreenBlendingBetaCoefficient(BYTE byVal);
	void C753SetOSDMode(BYTE byVal);
	void C753SetOSDControl(BYTE byVal);
	void C753SetOSDPenetrationColor(BYTE byVal);
	void C753SetOSDWriteInhibitColor(BYTE byVal);
	void C753SetOSDFillColor(BYTE byVal);
	void C753SetBlinkingTime(BYTE byVal);
	void C753SetBlinkCycle(BYTE byVal);
	void C753SetOSDACTHorizontalStart(WORD wVal);
	void C753SetOSDACTHorizontalWidth(WORD wVal);
	void C753SetOSDACTVerticalStart(WORD wVal);
	void C753SetOSDACTVerticalWidth(WORD wVal);
	void C753SetOSDStartAddress(DWORD dwVal);
	void C753SetOSDMemoryLinefeedWidth(BYTE byVal);
	void C753SetCharacterBufferHorizontalStart(BYTE byVal);
	void C753SetCharacterBufferHorizontalWidth(BYTE byVal);
	void C753SetCharacterBufferVerticalStart(BYTE byVal);
	void C753SetCharacterBufferVerticalWidth(BYTE byVal);
	void C753SetBitBLTHorizontalWidth(WORD wVal);
	void C753SetBitBLTVerticalWidth(WORD wVal);
	void C753SetCPUReadAddress(DWORD dwVal);
	void C753SetCPUWriteAddress(DWORD dwVal);
	void C753SetCPUData(BYTE byVal);
	BYTE C753GetCPUData(void);
	void C753WritePixel(BYTE byRed, BYTE byGreen, BYTE byBlue, BYTE byDump);
	void C753WriteN1BitPixels(WORD wNPixels, RGBQUAD *pC753Plt, BYTE **ppbyMap, BYTE *pbyBuf);
	void C753WriteN8BitPixels(WORD wNPixels, RGBQUAD *pC753Plt, BYTE *pbyBuf);
	void C753WriteN24BitPixels(WORD wNPixels, BYTE *pbyBuf);
	void C753ReadN24BitPixels(WORD wNPixels, BYTE *pbyBuf);
	void C753SetCharacterBufferAddress(WORD wVal);
	void C753SetCharacterBufferData(BYTE byVal);
	void C753SetPaletteAddress(BYTE byVal);
	void C753SetPaletteData(BYTE byVal);
	BYTE C753GetBitmapOSDStatus(void);
	void C753SetBitmapOSD90DegreeRotation(BYTE byVal);
	void C753SetBitBLTWriteLinefeedWidth(BYTE byVal);
	void C753SetBitBLTReadLinefeedWidth(BYTE byVal);
	void C753SetBitmapOSDAccessControl(BYTE byVal);
	void C753SetMemoryProtect(WORD wVal);
	void C753SetBitBLTTriggerVSDelay(BYTE byVal);
	void C753SetInterruptEnable(WORD wVal);
	void C753SetInterruptReset(WORD wVal);
	void C753SetTESTDT(BYTE byVal);
	void C753SetTESTAD(BYTE byVal);
	void C753SetTestG(BYTE byVal);
	/*Bank 1 function*/
	void C753SetOutputPortOAOI0HorizontalStart(WORD wVal);
	void C753SetOutputPortOAOI0HorizontalEnd(WORD wVal);
	void C753SetOutputPortOAOI0VerticalStart(WORD wVal);
	void C753SetOutputPortOAOI0VerticalEnd(WORD wVal);
	void C753SetOutputPortOAOI1HorizontalStart(WORD wVal);
	void C753SetOutputPortOAOI1HorizontalEnd(WORD wVal);
	void C753SetOutputPortOAOI1VerticalStart(WORD wVal);
	void C753SetOutputPortOAOI1VerticalEnd(WORD wVal);
	void C753SetOutputPortOAOI2HorizontalStart(WORD wVal);
	void C753SetOutputPortOAOI2HorizontalEnd(WORD wVal);
	void C753SetOutputPortOAOI2VerticalStart(WORD wVal);
	void C753SetOutputPortOAOI2VerticalEnd(WORD wVal);
	void C753SetOutputPortOAOI3HorizontalStart(WORD wVal);
	void C753SetOutputPortOAOI3HorizontalEnd(WORD wVal);
	void C753SetOutputPortOAOI3VerticalStart(WORD wVal);
	void C753SetOutputPortOAOI3VerticalEnd(WORD wVal);
	void C753SetBackgroundControl(BYTE byVal);
	void C753SetOutputBackground0(DWORD dwVal);
	void C753SetOutputBackground1(DWORD dwVal);
	void C753SetOutputPatternBarWidth(BYTE byVal);
	void C753SetOutputPatternSpeed(BYTE byVal);
	void C753SetOutputPatternCycle(WORD wVal);
	void C753SetPatternGeneratorControl(BYTE byVal);
	void C753SetRAMPCounterStepSetting(BYTE byVal);
	void C753SetHorizontalRAMPCounterLimitValue(WORD wVal);
	void C753SetVerticalRAMPCounterLimitValue(WORD wVal);
	void C753SetColorBarWidthSetting(BYTE byVal);
	void C753SetPWMControl0(WORD wVal);
	void C753SetPWMControl1(WORD wVal);
	void C753SetPWMControl2(WORD wVal);
	void C753SetPWMControl3(WORD wVal);
	void C753SetIPCLKPLLControl(BYTE byVal);
	void C753SetIPCLKReferenceDividing(BYTE byVal);
	void C753SetIPCLKFeedbackDividing(BYTE byVal);
	void C753SetPOCLKPLLControl(BYTE byVal);
	void C753SetPOCLKReferenceDividing(BYTE byVal);
	void C753SetPOCLKFeedbackDividing(BYTE byVal);
	void C753SetDLLControl0(BYTE byVal);
	void C753SetDLLControl1(BYTE byVal);
	void C753SetDLLControl2(BYTE byVal);
	void C753SetDLLControl3(BYTE byVal);
	void C753SetDLLControl4(BYTE byVal);
	void C753SetDLLControl5(BYTE byVal);
	void C753SetDLLControl6(BYTE byVal);
	void C753SetDLLControl7(BYTE byVal);
	void C753SetDLLControl8(BYTE byVal);
	/*Bank 2/4 function*/
	void C753SetOutputPortACTHorizontalStart(SDWORD iCh, WORD wVal);
	void C753SetOutputPortACTHorizontalWidth(SDWORD iCh, WORD wVal);
	void C753SetOutputPortACTVerticalStart(SDWORD iCh, WORD wVal);
	void C753SetOutputPortACTVerticalWidth(SDWORD iCh, WORD wVal);
	void C753SetOutputPostEnlargementHorizontalEdgeEmphasisControl(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementHorizontalEdgeEmphasisCoringL(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementHorizontalEdgeEmphasisCoringH(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementHorizontalEdgeEmphasisCoefficient(SDWORD iCh, DWORD dwVal);
	void C753SetOutputPostEnlargementHorizontalEdgeAreaSelect(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementVerticalEdgeEmphasisControl(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementVerticalEdgeEmphasisCoringL(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementVerticalEdgeEmphasisCoringH(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementVerticalEdgeEmphasisCoefficient(SDWORD iCh, DWORD dwVal);
	void C753SetOutputPostEnlargementVerticalEdgeAreaSelect(SDWORD iCh, BYTE byVal);
	void C753SetOutputPostEnlargementVerticalEdgeEmphasisControl2(SDWORD iCh, BYTE byVal);
	void C753SetOutputFill(SDWORD iCh, DWORD dwVal);
	void C753SetOutputImageControl(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalEdgeEmphasisControl(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalEdgeEmphasisCoringL(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalEdgeEmphasisCoringH(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalEdgeEmphasisOvershootFilterCoefficient(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalEdgeEmphasisUndershootFilterCoefficient(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalEnlargementControl(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalEnlargementInitialValue(SDWORD iCh, BYTE byVal);
	void C753SetOutputHorizontalZoomScale(SDWORD iCh, WORD wVal);
	void C753SetOutputVerticalEnlargementControl(SDWORD iCh, BYTE byVal);
	void C753SetOutputVerticalEnlargementInitialValue(SDWORD iCh, BYTE byVal);
	void C753SetOutputVerticalZoomScale(SDWORD iCh, WORD wVal);
	void C753LoadOutputHorizontalZoomLookupTable(SDWORD iCh, const BYTE *pbyVal);
	void C753LoadOutputVerticalZoomLookupTable(SDWORD iCh, const BYTE *pbyVal);
	/*Bank 6/8 function*/
	void C753SetInputFormatControl(SDWORD iCh, BYTE byVal);
	void C753SetInputPortSyncControl(SDWORD iCh, BYTE byVal);
	void C753SetInputFieldRecognitionControl(SDWORD iCh, BYTE byVal);
	void C753SetInputDigitalInterfaceControl(SDWORD iCh, BYTE byVal);
	void C753SetInputComponentInputControl(SDWORD iCh, BYTE byVal);
	void C753SetInputPortACTHorizontalStart(SDWORD iCh, WORD wVal);
	void C753SetInputPortACTHorizontalWidth(SDWORD iCh, WORD wVal);
	void C753SetInputPortACTVerticalStart(SDWORD iCh, WORD wVal);
	void C753SetInputPortACTVerticalWidth(SDWORD iCh, WORD wVal);
	void C753SetInputSignalSwap(SDWORD iCh, BYTE byVal);
	void C753SetInputImageControl(SDWORD iCh, BYTE byVal);
	void C753SetInputFill(SDWORD iCh, DWORD dwVal);
	void C753SetInputUVLowPassFilterCoefficient(SDWORD iCh, DWORD dwVal);
	void C753SetInputRGBYUVCoefficientRY(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientGY(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientBY(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientRU(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientGU(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientBU(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientRV(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientGV(SDWORD iCh, WORD wVal);
	void C753SetInputRGBYUVCoefficientBV(SDWORD iCh, WORD wVal);
	void C753SetInputShrinkCompensationControl(SDWORD iCh, BYTE byVal);
	void C753SetInputHorizontalShrinkControl(SDWORD iCh, BYTE byVal);
	void C753SetInputHorizontalShrinkInitialValue(SDWORD iCh, BYTE byVal);
	void C753SetInputHorizontalShrinkScale(SDWORD iCh, WORD wVal);
	void C753SetInputVerticalShrinkControl(SDWORD iCh, BYTE byVal);
	void C753SetInputVerticalShrinkInitialValue(SDWORD iCh, BYTE byVal);
	void C753SetInputVerticalShrinkScale(SDWORD iCh, WORD wVal);
	void C753SetInputHorizontalShrinkCompensation(SDWORD iCh, BYTE byVal);
	void C753SetInputVerticalShrinkCompensation(SDWORD iCh, BYTE byVal);
	void C753LoadInputHorizontalShrinkLookupTable(SDWORD iCh, const BYTE *pbyVal);
	void C753LoadInputVerticalShrinkLookupTable(SDWORD iCh, const BYTE *pbyVal);
	/*Bank 7/9 function*/
	void C753SetInputImageCharacteristicsMeasurementControl(SDWORD iCh, BYTE byVal);
	void C753SetInputMeasurementHorizontalStart(SDWORD iCh, WORD wVal);
	void C753SetInputMeasurementVerticalStart(SDWORD iCh, WORD wVal);
	void C753SetInputMeasurementHorizontalEnd(SDWORD iCh, WORD wVal);
	void C753SetInputMeasurementVerticalEnd(SDWORD iCh, WORD wVal);
	void C753SetInputCharacteristicsMeasurementThreshold(SDWORD iCh, BYTE byVal);
	/*Bank 10/11 function*/
	void C753SetIPConversionOutputPortHorizontalSyncCycle(SDWORD iCh, WORD wVal);
	void C753SetIPConversionOutputPortVerticalSyncCycle(SDWORD iCh, WORD wVal);
	void C753SetIPConversionForcedSyncResetDelay(SDWORD iCh, BYTE byVal);
	void C753SetIPConversionOutputPortActiveAreaHorizontalStart(SDWORD iCh, WORD wVal);
	void C753SetIPConversionOutputPortActiveAreaHorizontalWidth(SDWORD iCh, WORD wVal);
	void C753SetIPConversionOutputPortActiveAreaVerticalStart(SDWORD iCh, WORD wVal);
	void C753SetIPConversionOutputPortActiveAreaVerticalWidth(SDWORD iCh, WORD wVal);
	void C753SetMovementNRControl(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueNRCoefficient(SDWORD iCh, BYTE byCoefA, BYTE byCoefB, BYTE byCoefC, BYTE byCoefD);
	void C753SetHorizontalMovementValueNRCoefficient3(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueNRCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueNRCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueNRCoefficient0(SDWORD iCh, BYTE byVal);
	void C753SetVerticalMovementValueGain(SDWORD iCh, BYTE byCoefA, BYTE byCoefB, BYTE byCoefC, BYTE byCoefD);
	void C753SetVerticalMovementValueGain3(SDWORD iCh, BYTE byVal);
	void C753SetVerticalMovementValueGain2(SDWORD iCh, BYTE byVal);
	void C753SetVerticalMovementValueGain1(SDWORD iCh, BYTE byVal);
	void C753SetVerticalMovementValueGain0(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueGain(SDWORD iCh, BYTE byCoefA, BYTE byCoefB, BYTE byCoefC, BYTE byCoefD);
	void C753SetHorizontalMovementValueGain3(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueGain2(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueGain1(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalMovementValueGain0(SDWORD iCh, BYTE byVal);
	void C753SetVerticalDirectionMAXFilter(SDWORD iCh, BYTE byVal);
	void C753SetMovementCoefficientNR(SDWORD iCh, BYTE byVal);
	void C753SetLUTWriteAddress(SDWORD iCh, BYTE byVal);
	void C753SetLUTCoefficient(SDWORD iCh, DWORD dwVal);
	void C753SetLUTWriteEnable(SDWORD iCh, BYTE byVal);
	void C753SetIPImageAdjustment(SDWORD iCh, BYTE byVal);
	void C753SetIPTest(SDWORD iCh, BYTE byVal);
	void C753SetPulldownControl1(SDWORD iCh, BYTE byVal);
	void C753SetPulldownControl2(SDWORD iCh, BYTE byVal);
	void C753Set22PulldownMovementDetectThreshold(SDWORD iCh, BYTE byVal);
	void C753Set23PulldownMovementDetectThreshold(SDWORD iCh, BYTE byVal);
	void C753SetPulldownSequenceThreshold(SDWORD iCh, BYTE byVal);
	void C753SetPulldownAreaWidthSelect(SDWORD iCh, BYTE byVal);
	void C753SetPulldownDetectAreaSelect(SDWORD iCh, BYTE byVal);
	void C753Set22PulldownResetDetectIndex(SDWORD iCh, BYTE byVal);
	void C753Set23PulldownResetDetectIndex(SDWORD iCh, BYTE byVal);
	void C753SetCombingProcessControl(SDWORD iCh, BYTE byVal);
	void C753SetCombingProcessControlLowLevelThreshold(SDWORD iCh, BYTE byVal);
	void C753SetCombingProcessControlHighLevelThreshold(SDWORD iCh, BYTE byVal);
	void C753SetDiagonalInterpolationControl(SDWORD iCh, DWORD dwVal);
	void C753LoadDiagonalInterpolationThreshold(SDWORD iCh, const BYTE *pbyVal);
	/*Bank 12/13 function*/
	void C753SetOutputField0MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetOutputField1MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetOutputField2MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetOutputField3MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	DWORD C753GetOutputField0MemoryReadStartAddress(SDWORD iCh);
	DWORD C753GetOutputField1MemoryReadStartAddress(SDWORD iCh);
	DWORD C753GetOutputField2MemoryReadStartAddress(SDWORD iCh);
	DWORD C753GetOutputField3MemoryReadStartAddress(SDWORD iCh);
	void C753SetInputField0MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetInputField1MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetInputField2MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetInputField3MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetMemoryReadLinefeedWidth(SDWORD iCh, BYTE byVal);
	BYTE C753GetMemoryReadLinefeedWidth(SDWORD iCh);
	void C753SetMemoryWriteLinefeedWidth(SDWORD iCh, BYTE byVal);
	void C753SetIPConversionField0MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetIPConversionField1MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetIPConversionField0MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetIPConversionField1MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetIPConversionField2MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetIPConversionField3MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetIPConversionMemoryLinefeedWidth(SDWORD iCh, BYTE byVal);
	void C753SetIPConversionMovementValueReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753SetTemporalNRReadStartAddressSelect(SDWORD iCh, BYTE byVal);
	void C753Set90DegreeRotationField0MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationField1MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationField2MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationField3MemoryReadStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationField0MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationField1MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationField2MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationField3MemoryWriteStartAddress(SDWORD iCh, DWORD dwVal);
	void C753Set90DegreeRotationMemoryReadLinefeedWidth(SDWORD iCh, BYTE byVal);
	void C753Set90DegreeRotationMemoryWriteLinefeedWidth(SDWORD iCh, BYTE byVal);
	void C753SetChannel1Image90DegreeRotationControl(BYTE byVal);
	void C753SetChannel1Image90DegreeRotationHorizontalActiveAreaWidth(WORD wVal);
	void C753SetChannel1Image90DegreeRotationVerticalActiveAreaWidth(WORD wVal);
	void C753SetChannel1Image90DegreeRotationVerticalSyncSignalDelay(WORD wVal);
	void C753SetChannel2Image90DegreeRotationControl(BYTE byVal);
	void C753SetChannel2Image90DegreeRotationHorizontalActiveAreaWidth(WORD wVal);
	void C753SetChannel2Image90DegreeRotationVerticalActiveAreaWidth(WORD wVal);
	void C753SetChannel2Image90DegreeRotationVerticalSyncSignalDelay(WORD wVal);
	void C753SetHorizontalSyncSignalAbsenceJudgmentValue(WORD wVal);
	void C753SetHorizontalSyncSignalPresenceJudgmentValue(WORD wVal);
	void C753SetVerticalSyncSignalAbsenceJudgmentValue(BYTE byVal);
	void C753SetVerticalSyncSignalPresenceJudgmentValue(BYTE byVal);
	void C753Set1MHzPulseGenerationControl(BYTE byVal);
	void C753SetDPMSControl(BYTE byVal);
	void C753SetDPMSInterruptReset(BYTE byVal);
	void C753SetTemporalNRControl(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRThreshold1(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRThreshold2(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRThreshold3(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRThreshold4(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient3(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient4(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient5(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient6(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient7(SDWORD iCh, BYTE byVal);
	void C753SetTemporalNRCoefficient8(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRControl(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendLowPassFilterHCoefficient0(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendLowPassFilterHCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendLowPassFilterHCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendLowPassFilterVCoefficient0(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendLowPassFilterVCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendLowPassFilterVCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRVDirectionCoefficient0(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRVDirectionCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRVDirectionCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRVDirectionCoefficient3(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRVDirectionCoefficient4(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRVDirectionCoefficient5(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRHDirectionCoefficient0(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRHDirectionCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRHDirectionCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRHDirectionCoefficient3(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRHDirectionCoefficient4(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRHDirectionCoefficient5(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendCoefficientBias(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRBlendCoefficientGain(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRNoiseBias(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRSubtractionBlendCoefficientGain(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold0(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold1(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold2(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold3(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold4(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold5(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold6(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThreshold7(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias0(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias1(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias2(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias3(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias4(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias5(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias6(SDWORD iCh, BYTE byVal);
	void C753SetMosquitoNRThresholdBias7(SDWORD iCh, BYTE byVal);
	void C753SetAdaptiveNRControl(SDWORD iCh, BYTE byVal);
	void C753SetAdaptiveNRThreshold(SDWORD iCh, DWORD dwVal);
	void C753SetAdaptiveNRCoefficient(SDWORD iCh, DWORD dwVal);
	void C753SetBlockNRControl(SDWORD iCh, WORD wVal);
	void C753SetBlockNRTest(SDWORD iCh, BYTE byVal);
	void C753SetBlockNoiseEdgeLevelThreshold0(SDWORD iCh, BYTE byVal);
	void C753SetBlockNoiseEdgeLevelThreshold1(SDWORD iCh, BYTE byVal);
	void C753SetBlockNoiseEdgeLevelThreshold2(SDWORD iCh, BYTE byVal);
	void C753SetBlockNoiseEdgeLevelThreshold3(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRAlphaBlendCoefficient0(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRAlphaBlendCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRLowPassFilterCoefficient0(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRLowPassFilterCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetBlockBoundaryPeripheralMovementValueThreshold(SDWORD iCh, BYTE byVal);
	void C753SetBlockBoundaryPeripheralEdgeLevelThreshold(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalBlockBoundaryCoordinate(SDWORD iCh, BYTE byVal);
	void C753SetVerticalBlockBoundaryCoordinate(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRDetectControl(SDWORD iCh, BYTE byVal);
	void C753SetLongFramesRegisterBlockBoundaryAutoDetect(SDWORD iCh, BYTE byVal);
	void C753SetHBlockBoundaryMatchingUpperLimitThresholdCenterPixel(SDWORD iCh, BYTE byVal);
	void C753SetHBlockBoundaryMatchingLowerLimitThresholdCenterPixel(SDWORD iCh, BYTE byVal);
	void C753SetHBlockBoundaryMatchingThresholdPeripheralPixel(SDWORD iCh, BYTE byVal);
	void C753SetHBlockBoundaryMatchingCountsThreshold(SDWORD iCh, BYTE byVal);
	void C753SetHBlockBoundaryMatchingCountsOffset(SDWORD iCh, BYTE byVal);
	void C753SetVBlockBoundaryMatchingUpperLimitThresholdCenterPixel(SDWORD iCh, BYTE byVal);
	void C753SetVBlockBoundaryMatchingLowerLimitThresholdCenterPixel(SDWORD iCh, BYTE byVal);
	void C753SetVBlockBoundaryMatchingThresholdPeripheralPixel(SDWORD iCh, BYTE byVal);
	void C753SetVBlockBoundaryMatchingCountsThreshold(SDWORD iCh, BYTE byVal);
	void C753SetVBlockBoundaryMatchingCountsOffset(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRProjectionControl(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRProjectionCoefficient(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRProjectionReadAddress(SDWORD iCh, BYTE byVal);
	void C753SetBlockNRProjectionReadData(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalBlockBoundaryInitialCoordinateForProjection(SDWORD iCh, WORD wVal);
	void C753SetHorizontalBlockEnlargementScaleForProjection(SDWORD iCh, WORD wVal);
	void C753SetVerticalBlockBoundaryInitialCoordinateForProjection(SDWORD iCh, WORD wVal);
	void C753SetVerticalBlockEnlargementScaleForProjection(SDWORD iCh, WORD wVal);
	void C753SetHorizontalVerticalNRControl(SDWORD iCh, BYTE byVal);
	void C753SetVerticalNRCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetVerticalNRCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalNRCoefficient1(SDWORD iCh, BYTE byVal);
	void C753SetHorizontalNRCoefficient2(SDWORD iCh, BYTE byVal);
	void C753SetChromaErrorCorrectionControl(SDWORD iCh, BYTE byVal);
	void C753SetChromaErrorDetectionThreshold(SDWORD iCh, BYTE byVal);
	void C753SetChromaErrorDetectionCountThreshold(SDWORD iCh, WORD wVal);
	void C753SetChromaErrorDetectionExclusionThreshold(SDWORD iCh, BYTE byVal);
	void C753SetChromaErrorAutomaticCorrectionThreshold(SDWORD iCh, BYTE byVal);
	void C753SetChromaErrorAutomaticCorrectionCounterUpperLimit(SDWORD iCh, BYTE byVal);
	void C753SetChromaErrorCorrectionLowPassFilterCoefficient(SDWORD iCh, BYTE byVal);
	WORD C753GetChannel1InputPortHorizontalSyncFrequency(void);
	WORD C753GetChannel1InputPortVerticalSyncFrequency(void);
	BYTE C753GetChannel1InputPortHorizontalSyncPulseWidth(void);
	BYTE C753GetChannel1InputPortVerticalSyncPulseWidth(void);
	WORD C753GetChannel2InputPortHorizontalSyncFrequency(void);
	WORD C753GetChannel2InputPortVerticalSyncFrequency(void);
	BYTE C753GetChannel2InputPortHorizontalSyncPulseWidth(void);
	BYTE C753GetChannel2InputPortVerticalSyncPulseWidth(void);
	WORD C753GetChannel1HorizontalAndVerticalSyncPhaseDifference0(void);
	WORD C753GetChannel1HorizontalAndVerticalSyncPhaseDifference1(void);
	WORD C753GetChannel2HorizontalAndVerticalSyncPhaseDifference0(void);
	WORD C753GetChannel2HorizontalAndVerticalSyncPhaseDifference1(void);
	WORD C753GetStatus(void);
	BYTE C753GetChannel1FieldHistory(void);
	BYTE C753GetChannel2FieldHistory(void);
	BYTE C753GetChannel1MeasurementStatusMonitor(void);
	BYTE C753GetChannel1CharacteristicsMeasurementResult0(void);
	BYTE C753GetChannel1CharacteristicsMeasurementResult1(void);
	WORD C753GetChannel1CharacteristicsMeasurementResultHorizontalCoordinate0(void);
	WORD C753GetChannel1CharacteristicsMeasurementResultVerticalCoordinate0(void);
	WORD C753GetChannel1CharacteristicsMeasurementResultHorizontalCoordinate1(void);
	WORD C753GetChannel1CharacteristicsMeasurementResultVerticalCoordinate1(void);
	BYTE C753GetChannel1SNHistogramMeasurementResult(void);
	BYTE C753GetChannel2MeasurementStatusMonitor(void);
	BYTE C753GetChannel2CharacteristicsMeasurementResult0(void);
	BYTE C753GetChannel2CharacteristicsMeasurementResult1(void);
	WORD C753GetChannel2CharacteristicsMeasurementResultHorizontalCoordinate0(void);
	WORD C753GetChannel2CharacteristicsMeasurementResultVerticalCoordinate0(void);
	WORD C753GetChannel2CharacteristicsMeasurementResultHorizontalCoordinate1(void);
	WORD C753GetChannel2CharacteristicsMeasurementResultVerticalCoordinate1(void);
	BYTE C753GetChannel2SNHistogramMeasurementResult(void);
	BYTE C753GetChannel1MAXFILTERResult(void);
	BYTE C753GetChannel1MINFILTERResult(void);
	BYTE C753GetChannel2MAXFILTERResult(void);
	BYTE C753GetChannel2MINFILTERResult(void);
	BYTE C753GetChannel1AverageLuminanceLevelResult(void);
	BYTE C753GetChannel2AverageLuminanceLevelResult(void);
	BYTE C753GetChannel123PulldownSequenceCount1(void);
	BYTE C753GetChannel123PulldownSequenceCount2(void);
	BYTE C753GetChannel123PulldownSequenceCount3(void);
	BYTE C753GetChannel123PulldownSequenceCount4(void);
	BYTE C753GetChannel123PulldownSequenceCount5(void);
	BYTE C753GetChannel122PulldownSequenceCount1(void);
	BYTE C753GetChannel223PulldownSequenceCount1(void);
	BYTE C753GetChannel223PulldownSequenceCount2(void);
	BYTE C753GetChannel223PulldownSequenceCount3(void);
	BYTE C753GetChannel223PulldownSequenceCount4(void);
	BYTE C753GetChannel223PulldownSequenceCount5(void);
	BYTE C753GetChannel222PulldownSequenceCount1(void);
	WORD C753GetOutputPortVerticalSyncFrequency(void);
	WORD C753GetPWMLowPulseWidthCounterValue(void);
	WORD C753GetPWMHighPulseWidthCounterValue(void);
	BYTE C753GetFlashStatus(void);
	WORD C753GetInterruptStatus(void);
	BYTE C753GetDPMSInterruptStatus(void);
	BYTE C753GetDPMSStatus(void);
	BYTE C753GetChannel1BlockNoiseHMatchingCountsMax(void);
	BYTE C753GetChannel1BlockNoiseHMatchingCountsMax2(void);
	BYTE C753GetChannel1BlockNoiseHBoundaryCoordinate(void);
	BYTE C753GetChannel1BlockNoiseVMatchingCountsMax(void);
	BYTE C753GetChannel1BlockNoiseVMatchingCountsMax2(void);
	BYTE C753GetChannel1BlockNoiseVBoundaryCoordinate(void);
	BYTE C753GetChannel2BlockNoiseHMatchingCountsMax(void);
	BYTE C753GetChannel2BlockNoiseHMatchingCountsMax2(void);
	BYTE C753GetChannel2BlockNoiseHBoundaryCoordinate(void);
	BYTE C753GetChannel2BlockNoiseVMatchingCountsMax(void);
	BYTE C753GetChannel2BlockNoiseVMatchingCountsMax2(void);
	BYTE C753GetChannel2BlockNoiseVBoundaryCoordinate(void);



private:




};

};

#endif /* USER_H_ */
